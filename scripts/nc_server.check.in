#!/bin/bash

# sh script to check for nc_server
# shouldn't be necessary if nc_server is started with systemd

# For some reason nc_server sometimes loses its rpc registration, even
# though the nc_server process is still running.  This script checks first
# whether the nc_server is registered, and then if not registered but
# running, the current process is killed before being restarted.  The pid
# check matches against the daemon instance using 'nc_server -z' so it does
# not match any "exclusive" nc_server subprocesses which do not register
# with rpc.

# this script is also useful to run a custom install of nc_server,
# with custom logging settings and especially without capabilities set
# like in the package, so that a core file can be dumped to debug
# crashes.

[ -n "$NC_SERVER_HOME" ] || export NC_SERVER_HOME=@NC_SERVER_HOME@

export PATH=${NC_SERVER_HOME}/bin:${PATH}
# lib is appended to NC_SERVER_HOME rather than inserting the entire
# NC_SERVER_LIBDIR setting, so NC_SERVER_HOME can be overridden in the
# environment.
export LD_LIBRARY_PATH=${NC_SERVER_HOME}/lib

# Do what we can to allow core files, although it's not always certain
# if this has any effect.  Run from the home directory where user is
# most likely to be able to write core files.
#
ulimit -c unlimited
cd $HOME

# If 1, run in the foreground with debugging, so nc_server log output
# is written to the same output as this script.  If 0, run in
# background, but still with debug logging.
foreground=1

echolog() {
    timestamp=`date "+%Y-%m-%d,%H:%M:%S"`
    echo "${timestamp}|$*"
}

# Echo the example crontab entries
echocron() {
cat <<'EOF'
NC_SERVER_HOME=${HOME}/nc-server
* * * * *   $NC_SERVER_HOME/bin/nc_server.check >> $NC_SERVER_HOME/logs/nc_server.log 2>&1
30 0 * * 0 /sbin/logrotate --state $NC_SERVER_HOME/logs/nc_server.log.status $NC_SERVER_HOME/logs/logrotate.conf
EOF
}

if [ "$1" == "cron" ]; then
    echocron
    exit 0
fi

echolog "NC_SERVER_HOME=${NC_SERVER_HOME}"

if [ "$1" != test_no_ping ]; then
    if nc_ping localhost >/dev/null 2>&1 ; then
        echolog "nc_server registered."
        exit 0
    fi
fi
echolog "nc_server not registered."

if [ $foreground -ne 0 ]; then
    cmd="nc_server -l 7 -d"
else
    cmd="nc_server -z -l 7"
fi
pid=`pgrep -x -f "$cmd"`

if [ -n "$pid" ]; then
    ps ufp "$pid"
    echolog "killing existing process: $pid"
    for i in 1 1 1 9 9 end ; do
        if [ $i == end ]; then
            echo "Kill failed."
            exit 1
        fi
        kill -s $i $pid
        sleep 1
        kill -0 "$pid" > /dev/null 2>&1 || break
    done
    echo "killed."
    echolog "sleeping 10 seconds to allow port to close..."
    sleep 10
else
    echolog "command not running: $cmd"
fi

echolog "restarting nc_server..."
# When running in the foreground, there's little point in continuing
# to check if it's responding.  Just exec it so it keeps logging to
# the same output as this script.  For that matter, when running in
# the background there is still little point to checking and
# complaining, since this is presumably running from cron, so it will
# be checked on the next run.
exec $cmd

# only complain if it isn't responding. Don't restart it.
for i in 1 2 3 4 5 end ; do
    sleep 1
    nc_ping localhost >/dev/null 2>&1 && break
    if [ $i == end ]; then
        echo "nc_server still not registered."
        exit 1
    fi
done
