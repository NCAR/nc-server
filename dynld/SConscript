
from SCons.Script import Environment

env = Environment(tools=["default", "nc_server_client"])

env.Append(CXXFLAGS=['-std=c++11'])

# Need additional nidas libraries that other nc_server clients do not.
env.Append(LIBS=['nidas_dynld', 'nidas'])

# This matches the hardcoded soVersionSuffix in nidas::core::DOMObjectFactory,
# so the netcdf rpc modules will have a .so.1 suffix which nidas will find.
env['SHLIBVERSION'] = '1'

# These headers are not installed, because nothing builds against them.
headers = env.Split("""
    NetcdfRPCChannel.h
    NetcdfRPCOutput.h
""")

# The NetcdfRPC classes have dependencies between each other, so they cannot
# be loaded individually as shared objects. It should work to put them into
# their own namespace with their own library, like nidas_dynld_ncrpc, so the
# nidas dynamic loader will find the shared library under the namespace name,
# but then all the configs would have to change which load with the
# isff.NetcdfRPCOutput class name.  So instead, create two libraries, each
# with both modules in them.  First to get loaded provides both dependencies.

sources = ["NetcdfRPCOutput.cc", "NetcdfRPCChannel.cc"]

liboutput = env.SharedLibrary("nidas_dynld_isff_NetcdfRPCOutput", sources)
libchannel = env.SharedLibrary("nidas_dynld_isff_NetcdfRPCChannel", sources)

# For some reason adding the libnc_server_rpc.so target to LIBS is not enough
# ensure that library gets built before these, so add an explicit dependency.
env.Depends(liboutput + libchannel, env['LIBNC_SERVER_RPC'])

# These are dynamically loaded shared libraries which are not linked into anything,
# so there is not much point to versioning them.
libdir = '${INSTALL_PREFIX}${PREFIX}/${ARCHLIBDIR}'
instlibs = env.InstallVersionedLib(libdir, liboutput)
instlibs += env.InstallVersionedLib(libdir, libchannel)
env.Alias('install', instlibs)

env.Clean('install', instlibs)
